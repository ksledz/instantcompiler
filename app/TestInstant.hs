-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
--import Filesystem.Path (basename)



import LexInstant
import ParInstant
import SkelInstant
import PrintInstant
import AbsInstant
import LLVMCompiler
import JVMCompiler
import qualified Data.Text as T
import qualified Data.Maybe


import ErrM




type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

slash :: T.Text
slash = T.pack("/")
ico :: T.Text
ico = T.pack(".ins")

basename :: T.Text -> T.Text
basename f = Data.Maybe.fromJust(T.stripSuffix ico (last $ T.splitOn slash f))

basestring :: String -> String
basestring f = T.unpack(basename(T.pack f))

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

runFile :: Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v p f =  readFile f >>= run v p f

run :: Verbosity -> ParseFun Program -> String -> String -> IO ()
run v p fname s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
                          exitFailure
           Ok  tree -> do args <- getArgs
                          case head args of
                            "--jvm" -> putStrLn  (allToJVM tree $ basestring fname)
                            "--llvm" ->putStrLn $ allToLLVM tree




showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  mapM_ (runFile 2 pProgram) $ tail args



